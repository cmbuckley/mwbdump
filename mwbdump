#!/bin/sh

# TRAP SIGNALS
trap 'cleanup' QUIT EXIT

readonly PRG=`basename $0`
readonly VER="0.2.0"
readonly TEMPFORMAT="$PRG.XXXX"

help(){
    echo "Usage: $PRG [OPTION]... workbench-file"
    echo
    echo "  -n, --no-create-db   Suppress schema creation."
    echo "  -t, --no-create-info Suppress table creation."
    echo "  -d, --no-data        Suppress table INSERT statements."
    echo "  -V, --version        Output version information and exit."
    echo "  -h, --help           Display this help message and exit."
}

version(){
    echo "$PRG version $VER"
}

err(){
    [ -n "$1" ] && echo "$PRG: $1" >&2
    help >&2
    [ -n "$2" ] && exit $2
}

cleanup(){
    rm -f $FILE_XSL_SCHEMA $FILE_XSL_TABLES $FILE_SQL_DATA
}

requireCommand(){
    command -v $1 >/dev/null 2>&1 || err "$PRG requires $1" 69 # EX_UNAVAILABLE
}

OPT_CREATE_SCHEMA=1
OPT_CREATE_TABLES=1
OPT_CREATE_DATA=1
MWBFILE=

while test $# -gt 0; do
    case $1 in
        --no-create-db | -n )
            OPT_CREATE_SCHEMA=0
            shift
            ;;

        --no-create-info | -t )
            OPT_CREATE_TABLES=0
            shift
            ;;

        --no-data | -d )
            OPT_CREATE_DATA=0
            shift
            ;;

        --version | -V )
            version
            exit
            ;;

        --help | -h )
            help
            exit
            ;;

        -* )
            err "$1: invalid option" 64 # EX_USAGE
            ;;

        * )
            [ -n "$MWBFILE" ] && err '' 64 # EX_USAGE

            if [ -e "$1" ]; then
                MWBFILE="$1"
                shift
            else
                err "$1: No such file or directory" 64 # EX_USAGE
            fi
            ;;
    esac
done

[ -z "$MWBFILE" ] && err '' 64 # EX_USAGE

requireCommand xsltproc
requireCommand sqlite3

FILE_XSL_SCHEMA=$(mktemp -t $TEMPFORMAT)
FILE_XSL_TABLES=$(mktemp -t $TEMPFORMAT)
FILE_XSL_REPLACEMENTS=$(mktemp -t $TEMPFORMAT)

cat << 'END_SCHEMA' > $FILE_XSL_SCHEMA
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text" media-type="application/x-sql" encoding="UTF-8" />

  <!-- root -->
  <xsl:template match="/">
    <xsl:apply-templates select="//value[@struct-name='db.mysql.Schema']" />
  </xsl:template>

  <!-- schemata -->
  <xsl:template match="value[@struct-name='db.mysql.Schema']">
    <xsl:text>CREATE SCHEMA IF NOT EXISTS `</xsl:text>
    <xsl:value-of select="value[@key='name']" />
    <xsl:text>`</xsl:text>
    <xsl:if test="value[@key='defaultCharacterSetName'] != ''">
        <xsl:text> DEFAULT CHARACTER SET </xsl:text>
        <xsl:value-of select="value[@key='defaultCharacterSetName']" />
        <xsl:if test="value[@key='defaultCollationName'] != ''">
            <xsl:text> COLLATE </xsl:text>
            <xsl:value-of select="value[@key='defaultCollationName']" />
        </xsl:if>
    </xsl:if>
    <xsl:text>;&#10;&#10;</xsl:text>
  </xsl:template>
</xsl:stylesheet>
END_SCHEMA

cat << 'END_TABLES' > $FILE_XSL_TABLES
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text" media-type="application/x-sql" encoding="UTF-8" />

  <!-- keys -->
  <xsl:key name="tables" match="//value[@struct-name='db.mysql.Table']/value[@key='name']" use="../@id" />
  <xsl:key name="columns" match="//value[@struct-name='db.mysql.Column']/value[@key='name']" use="../@id" />

  <!-- root -->
  <xsl:template match="/">
    <xsl:apply-templates select="//value[@struct-name='db.mysql.Schema']/value/value[@struct-name='db.mysql.Table']" />
  </xsl:template>

  <!-- tables -->
  <xsl:template match="value[@struct-name='db.mysql.Table']">
    <xsl:text>CREATE TABLE IF NOT EXISTS `</xsl:text>
    <xsl:value-of select="../../value[@key='name']" />
    <xsl:text>`.`</xsl:text>
    <xsl:value-of select="value[@key='name']" />
    <xsl:text>` (&#10;</xsl:text>
    <xsl:apply-templates select="value/value[@struct-name='db.mysql.Column']" />
    <xsl:apply-templates select="value/value[@struct-name='db.mysql.Index'][value[@key='indexType'][.='PRIMARY']]" />
    <xsl:apply-templates select="value/value[@struct-name='db.mysql.Index'][value[@key='indexType'][. != 'PRIMARY']]" />
    <xsl:apply-templates select="value/value[@struct-name='db.mysql.ForeignKey']" />
    <xsl:text>&#10;) ENGINE = </xsl:text>
    <xsl:value-of select="value[@key='tableEngine']" />
    <xsl:text>;&#10;&#10;</xsl:text>
  </xsl:template>

  <!-- columns -->
  <xsl:template match="value[@struct-name='db.mysql.Column']">
    <xsl:if test="position() != 1">,&#10;</xsl:if>
    <xsl:value-of select="concat('  `', value[@key='name'], '` ')" />
    <xsl:apply-templates select="link[@key='simpleType']" />
    <xsl:apply-templates select="." mode="column-extras" />
    <xsl:for-each select="value[@key='flags']/value">
      <xsl:value-of select="concat(' ', .)" />
    </xsl:for-each>
    <xsl:apply-templates select="." mode="column-null" />
    <xsl:apply-templates select="." mode="column-default" />
    <xsl:if test="value[@key='autoIncrement'] = '1'"> AUTO_INCREMENT</xsl:if>
  </xsl:template>

  <!-- column type -->
  <xsl:template match="link[@key='simpleType']">
    <xsl:choose>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.int'">INT</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.varchar'">VARCHAR</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.char'">CHAR</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.decimal'">DECIMAL</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.datetime'">DATETIME</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.blob'">BLOB</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.longblob'">LONGBLOB</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.mediumblob'">MEDIUMBLOB</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.tinyblob'">TINYBLOB</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.date'">DATE</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.time'">TIME</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.timestamp'">TIMESTAMP</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.year'">YEAR</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.smallint'">SMALLINT</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.tinyint'">TINYINT</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.bigint'">BIGINT</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.mediumint'">MEDIUMINT</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.text'">TEXT</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.bit'">BIT</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.mediumtext'">MEDIUMTEXT</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.enum'">ENUM</xsl:when>
      <xsl:when test=". = 'com.mysql.rdbms.mysql.datatype.float'">FLOAT</xsl:when>
      <!--<xsl:otherwise>UNKNOWN</xsl:otherwise>-->
    </xsl:choose>
  </xsl:template>

  <!-- column extras -->
  <xsl:template match="value[@struct-name='db.mysql.Column']" mode="column-extras">
    <xsl:if test="value[@key='precision'] != '-1'">
      <xsl:value-of select="concat('(', value[@key='precision'])" />
      <xsl:if test="value[@key='scale'] != '-1'">
        <xsl:value-of select="concat(',', value[@key='scale'])" />
      </xsl:if>
      <xsl:text>)</xsl:text>
    </xsl:if>
    <xsl:if test="value[@key='length'] != '-1'">
      <xsl:value-of select="concat('(', value[@key='length'], ')')" />
    </xsl:if>
    <xsl:if test="value[@key='datatypeExplicitParams'] != ''">
      <xsl:value-of select="value[@key='datatypeExplicitParams']" />
    </xsl:if>
  </xsl:template>

  <!-- column nullable -->
  <xsl:template match="value[@struct-name='db.mysql.Column']" mode="column-null">
    <xsl:if test="value[@key='isNotNull'] = '1'"> NOT</xsl:if>
    <xsl:text> NULL</xsl:text>
  </xsl:template>

  <!-- column default -->
  <xsl:template match="value[@struct-name='db.mysql.Column']" mode="column-default">
    <xsl:choose>
      <xsl:when test="value[@key='defaultValue'] = ''">
        <xsl:if test="value[@key='defaultValueIsNull'] = '1'"> DEFAULT NULL</xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="concat(' DEFAULT ', value[@key='defaultValue'])" />
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- primary key -->
  <xsl:template match="value[@struct-name='db.mysql.Index'][value[@key='indexType'][.='PRIMARY']]">
    <xsl:if test="position() = 1">,&#10;  PRIMARY KEY (</xsl:if>
    <xsl:apply-templates select="value/value[@struct-name='db.mysql.IndexColumn']/link[@key='referencedColumn']" />
    <xsl:text>)</xsl:text>
  </xsl:template>

  <!-- other indices -->
  <xsl:template match="value[@struct-name='db.mysql.Index'][value[@key='indexType'][. != 'PRIMARY']]">
    <xsl:text>,&#10;  </xsl:text>
    <xsl:if test="value[@key='indexType'] != 'INDEX'">
      <xsl:value-of select="concat(value[@key='indexType'], ' ')" />
    </xsl:if>
    <xsl:text>INDEX </xsl:text>
    <xsl:value-of select="concat('`', value[@key='name'], '` (')" />
    <xsl:apply-templates select="value/value[@struct-name='db.mysql.IndexColumn']" />
    <xsl:text>)</xsl:text>
  </xsl:template>

  <!-- foreign keys -->
  <xsl:template match="value[@struct-name='db.mysql.ForeignKey']">
    <xsl:text>,&#10;  CONSTRAINT `</xsl:text>
    <xsl:value-of select="value[@key='name']" />
    <xsl:text>`&#10;    FOREIGN KEY (</xsl:text>
    <xsl:apply-templates select="value[@key='referencedColumns']/link[@type='object']" />
    <xsl:text>)&#10;    REFERENCES `</xsl:text>
    <xsl:value-of select="../../../../value[@key='name']" />
    <xsl:text>`.`</xsl:text>
    <xsl:value-of select="key('tables', link[@key='referencedTable'])" />
    <xsl:text>` (</xsl:text>
    <xsl:apply-templates select="value[@key='columns']/link[@type='object']" />
    <xsl:text>)</xsl:text>
    <xsl:text>&#10;    ON DELETE </xsl:text>
    <xsl:value-of select="value[@key='deleteRule']" />
    <xsl:text>&#10;    ON UPDATE </xsl:text>
    <xsl:value-of select="value[@key='updateRule']" />
  </xsl:template>

  <!-- primary / foreign key columns -->
  <xsl:template match="value[@struct-name='db.mysql.IndexColumn']/link[@key='referencedColumn'] | value[@content-struct-name='db.Column']/link[@type='object']">
    <xsl:if test="position() != 1">, </xsl:if>
    <xsl:value-of select="concat('`', key('columns', .), '`')" />
  </xsl:template>

  <!-- index columns -->
  <xsl:template match="value[@struct-name='db.mysql.IndexColumn']">
    <xsl:if test="position() != 1">, </xsl:if>
    <xsl:value-of select="concat('`', key('columns', link[@key='referencedColumn']), '` ')" />
    <xsl:choose>
      <xsl:when test="value[@key='descend'] = '0'">ASC</xsl:when>
      <xsl:otherwise>DESC</xsl:otherwise>
    </xsl:choose>
  </xsl:template>
</xsl:stylesheet>
END_TABLES

# XSLT to get a list of table IDs -> names (as sed replacements)
cat << 'END_REPLACEMENTS' > $FILE_XSL_REPLACEMENTS
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text" media-type="application/x-sql" encoding="UTF-8" />

  <!-- root -->
  <xsl:template match="/">
    <xsl:apply-templates select="//value[@struct-name='db.mysql.Table']" />
  </xsl:template>

  <xsl:template match="value[@struct-name='db.mysql.Table']">
    <xsl:value-of select="concat('s/&#34;', @id, '&#34;/`', value[@key='name'], '`/&#10;')" />
  </xsl:template>
</xsl:stylesheet>
END_REPLACEMENTS

unzip -t "$MWBFILE" >/dev/null 2>&1
[ $? -ne 0 ] && err "$MWBFILE: Invalid workbench file" 64 # EX_USAGE

if [ "$OPT_CREATE_SCHEMA" -eq "1" ]; then
    unzip -p "$MWBFILE" document.mwb.xml | xsltproc $FILE_XSL_SCHEMA -
fi

if [ "$OPT_CREATE_TABLES" -eq "1" ]; then
    unzip -p "$MWBFILE" document.mwb.xml | xsltproc $FILE_XSL_TABLES -
fi

# SQL INSERT replacements
if [ "$OPT_CREATE_DATA" -eq "1" ]; then
    SQL_REPLACEMENTS=$(unzip -p "$MWBFILE" document.mwb.xml | xsltproc $FILE_XSL_REPLACEMENTS -)
    SQL_REPLACEMENTS_CUSTOM='s/VALUES(NULL,/VALUES (/'
    FILE_SQL_DATA=$(mktemp -t $TEMPFORMAT)

    unzip -p "$1" '@db/data.db' > $FILE_SQL_DATA
    sqlite3 $FILE_SQL_DATA '.dump' | grep '^INSERT' | sed -e "$SQL_REPLACEMENTS" -e "$SQL_REPLACEMENTS_CUSTOM" | grep -v '^INSERT INTO "'
fi
